use std::str::FromStr;
use crate::ast::*;
use crate::security::{Flow, SecurityClass};

grammar;

match {
    // Skip whitespace and comments
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // `// comment`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // `/* comment */`
    _
}

Sep<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
SepNonEmpty<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T> =>{
        v.push(e);
        v
    }
};

pub Commands: Commands = SepNonEmpty<Command, ";"> => Commands(<>);

Command: Command = {
    AnnotatedCommand,
    <Target> ":=" <AExpr>   => Command::Assignment(<>),
    "if" <Guards> "fi"      => Command::If(<>),
    "do" <Guards> "od"      => Command::Loop(<>),
    "skip"                  => Command::Skip,
    "continue"              => Command::Continue,
    "break"                 => Command::Break,
};

#[inline]
Target: Target<Box<AExpr>> = {
    Variable => Target::Variable(<>),
    <arr:Array> "[" <idx:AExpr> "]" => Target::Array(arr, Box::new(idx)),
}
#[inline]
Variable: Variable = Var => Variable(<>);
#[inline]
Array: Array = Var => Array(<>);

Guards: Vec<Guard> = Sep<Guard, "[]">;

Guard: Guard = {
    <BExpr> "->" <Commands> => Guard(<>),
};

AExpr_ = AExpr;
AExpr: AExpr = {
    #[precedence(level="1")]
    Int => AExpr::Number(<>),
    Target => AExpr::Reference(<>),
    Function<AExprBox> => AExpr::Function(<>),
    "-" <AExpr> => AExpr::Minus(Box::new(<>)),
    "(" <AExpr_> ")",

    #[precedence(level="2")] #[assoc(side="right")]
    <l:AExpr> "^" <r:AExpr> => AExpr::binary(l, AOp::Pow, r),

    #[precedence(level="3")] #[assoc(side="left")]
    <l:AExpr> "*" <r:AExpr> => AExpr::binary(l, AOp::Times, r),
    <l:AExpr> "/" <r:AExpr> => AExpr::binary(l, AOp::Divide, r),

    #[precedence(level="4")] #[assoc(side="left")]
    <l:AExpr> "+" <r:AExpr> => AExpr::binary(l, AOp::Plus, r),
    <l:AExpr> "-" <r:AExpr> => AExpr::binary(l, AOp::Minus, r),
};
AExprBox: Box<AExpr> = AExpr => Box::new(<>);

Function<X>: Function = {
    "division" "(" <X> "," <X> ")"  => Function::Division(<>),
    "min" "(" <X> "," <X> ")"       => Function::Min(<>),
    "max" "(" <X> "," <X> ")"       => Function::Max(<>),
    "count" "(" <Array> "," <X> ")"     => Function::Count(<>),
    "count" "(" <LArray> "," <X> ")"    => Function::LogicalCount(<>),
    "length" "(" <Array> ")"                => Function::Length(<>),
    "length" "(" <LArray> ")"               => Function::LogicalLength(<>),
    "fac" "(" <X> ")"                   => Function::Fac(<>),
    "fib" "(" <X> ")"                   => Function::Fib(<>),
};


pub BExpr: BExpr = {
    #[precedence(level="0")]
    <l:AExpr_> <op:RelOp> <r:AExpr_> => BExpr::Rel(l, op, r),
    "true" => BExpr::Bool(true),
    "false" => BExpr::Bool(false),
    "!" <BExpr> => BExpr::Not(Box::new(<>)),
    "(" <BExpr_> ")",

    #[precedence(level="1")] #[assoc(side="left")]
    <l:BExpr> "&" <r:BExpr> => BExpr::logic(l, LogicOp::Land, r),
    <l:BExpr> "&&" <r:BExpr> => BExpr::logic(l, LogicOp::And, r),

    #[precedence(level="2")] #[assoc(side="left")]
    <l:BExpr> "|" <r:BExpr> => BExpr::logic(l, LogicOp::Lor, r),
    <l:BExpr> "||" <r:BExpr> => BExpr::logic(l, LogicOp::Or, r),
};
BExpr_: BExpr = BExpr;

RelOp: RelOp = {
    "<" => RelOp::Lt,
    ">" => RelOp::Gt,
    "<=" => RelOp::Le,
    ">=" => RelOp::Ge,
    "=" => RelOp::Eq,
    "!=" => RelOp::Ne,
};

Var: String = r"[a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();
LogicalVar: String = r"_[a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

Int: Int = r"[0-9]+" => Int::from_str(<>).unwrap();


// Security lattice

pub SecurityLattice: Vec<Flow<SecurityClass>> = Sep<SecurityLatticeFlow, ",">;
SecurityLatticeFlow: Flow<SecurityClass> = <from:SecurityClass> "<" <into:SecurityClass> => Flow { <> };
SecurityClass: SecurityClass = Var => SecurityClass(<>);

// Predicates

pub AnnotatedCommand: Command = PredicateBlock ECommands PredicateBlock => Command::Annotated(<>);

ECommands: Commands = SepNonEmpty<ECommand, ";"> => Commands(<>);

ECommand: Command = {
    <Target> ":=" <AExpr>                 => Command::Assignment(<>),
    "if" <EGuards> "fi"                   => Command::If(<>),
    "do" <PredicateBlock> <EGuards> "od"  => Command::EnrichedLoop(<>),
    "skip"                                => Command::Skip,
    "continue"                            => Command::Continue,
    "break"                               => Command::Break,
};

EGuards: Vec<Guard> = Sep<EGuard, "[]">;

EGuard: Guard = {
    <BExpr> "->" <ECommands> => Guard(<>),
};

PredicateBlock = "{" <Predicate> "}";

pub Predicate: Predicate = {
    #[precedence(level="0")]
    <l:EAExpr_> <op:RelOp> <r:EAExpr_> => Predicate::Rel(l, op, r),
    "true" => Predicate::Bool(true),
    "false" => Predicate::Bool(false),
    "!" <Predicate> => Predicate::Not(Box::new(<>)),
    "(" <Predicate_> ")",

    #[precedence(level="1")] #[assoc(side="left")]
    <l:Predicate> "&" <r:Predicate> => Predicate::logic(l, LogicOp::Land, r),
    <l:Predicate> "&&" <r:Predicate> => Predicate::logic(l, LogicOp::And, r),

    #[precedence(level="2")] #[assoc(side="left")]
    <l:Predicate> "|" <r:Predicate> => Predicate::logic(l, LogicOp::Lor, r),
    <l:Predicate> "||" <r:Predicate> => Predicate::logic(l, LogicOp::Or, r),

    #[precedence(level="3")] #[assoc(side="right")]
    <l:Predicate> "==>" <r:Predicate> => Predicate::logic(l, LogicOp::Implies, r),

    #[precedence(level="4")]
    <q:Quantifier> <v:LogicalVar> "::" <p:Predicate> => Predicate::Quantified(q, Target::Variable(Variable(v)), Box::new(p)),
};
Predicate_: Predicate = Predicate;

Quantifier: Quantifier = {
    "exists" => Quantifier::Exists,
    "forall" => Quantifier::Forall,
};

EAExpr_ = EAExpr;
EAExpr: AExpr = {
    #[precedence(level="1")]
    Int => AExpr::Number(<>),
    Target => AExpr::Reference(<>),
    LTarget => AExpr::Reference(<>),
    Function<EAExprBox> => AExpr::Function(<>),
    "-" <EAExpr> => AExpr::Minus(Box::new(<>)),
    "(" <EAExpr_> ")",

    #[precedence(level="2")] #[assoc(side="right")]
    <l:EAExpr> "^" <r:EAExpr> => AExpr::binary(l, AOp::Pow, r),

    #[precedence(level="3")] #[assoc(side="left")]
    <l:EAExpr> "*" <r:EAExpr> => AExpr::binary(l, AOp::Times, r),
    <l:EAExpr> "/" <r:EAExpr> => AExpr::binary(l, AOp::Divide, r),


    #[precedence(level="4")] #[assoc(side="left")]
    <l:EAExpr> "+" <r:EAExpr> => AExpr::binary(l, AOp::Plus, r),
    <l:EAExpr> "-" <r:EAExpr> => AExpr::binary(l, AOp::Minus, r),
};
EAExprBox: Box<AExpr> = EAExpr => Box::new(<>);

#[inline]
LTarget: Target<Box<AExpr>> = {
    LVariable => Target::Variable(<>),
    <arr:LArray> "[" <idx:EAExpr> "]" => Target::Array(arr, Box::new(idx)),
}
#[inline]
LVariable: Variable = LogicalVar => Variable(<>);
#[inline]
LArray: Array = LogicalVar => Array(<>);
